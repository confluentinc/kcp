package iam_acls

import (
	"encoding/csv"
	"fmt"
	"os"
	"slices"
	"strings"

	"github.com/confluentinc/kcp/internal/utils"
	"github.com/spf13/cobra"
	"github.com/spf13/pflag"
)

var (
	roleArn          string
	userArn          string
	clientDiscovFile string
	outputDir        string
	skipAuditReport  bool
)

func NewMigrateIamAclsCmd() *cobra.Command {
	aclsCmd := &cobra.Command{
		Use:           "iam",
		Short:         "Convert IAM ACLs to Confluent Cloud IAM ACLs.",
		Long:          "Convert IAM ACLs from IAM roles or users to Confluent Cloud IAM ACLs as individual Terraform resources.",
		SilenceErrors: true,
		PreRunE:       preRunMigrateIamAcls,
		RunE:          runMigrateIamAcls,
	}

	groups := map[*pflag.FlagSet]string{}

	requiredFlags := pflag.NewFlagSet("required", pflag.ExitOnError)
	requiredFlags.SortFlags = false
	requiredFlags.StringVar(&roleArn, "role-arn", "", "IAM Role ARN to convert ACLs from")
	requiredFlags.StringVar(&userArn, "user-arn", "", "IAM User ARN to convert ACLs from")
	requiredFlags.StringVar(&clientDiscovFile, "client-file", "", "The client discovery file generated by the 'kcp scan client-inventory' command")
	aclsCmd.Flags().AddFlagSet(requiredFlags)
	groups[requiredFlags] = "Required Flags (choose one)"

	optionalFlags := pflag.NewFlagSet("optional", pflag.ExitOnError)
	optionalFlags.SortFlags = false
	optionalFlags.StringVar(&outputDir, "output-dir", "", "The directory where the Confluent Cloud Terraform ACL assets will be written to")
	optionalFlags.BoolVar(&skipAuditReport, "skip-audit-report", false, "Skip generating an audit report of the converted ACLs")
	aclsCmd.Flags().AddFlagSet(optionalFlags)
	groups[optionalFlags] = "Optional Flags"

	aclsCmd.SetUsageFunc(func(c *cobra.Command) error {
		fmt.Printf("%s\n\n", c.Short)

		flagOrder := []*pflag.FlagSet{requiredFlags, optionalFlags}
		groupNames := []string{"Required Flags", "Optional Flags"}

		for i, fs := range flagOrder {
			usage := fs.FlagUsages()
			if usage != "" {
				fmt.Printf("%s:\n%s\n", groupNames[i], usage)
				if groupNames[i] == "Required Flags" {
					fmt.Printf("  (Provide either --role-arn OR --user-arn OR --client-file)\n\n")
				}
			}
		}

		fmt.Println("All flags can be provided via environment variables (uppercase, with underscores).")

		return nil
	})

	aclsCmd.MarkFlagsOneRequired("role-arn", "user-arn", "client-file")
	aclsCmd.MarkFlagsMutuallyExclusive("role-arn", "user-arn", "client-file")

	return aclsCmd
}

func preRunMigrateIamAcls(cmd *cobra.Command, args []string) error {
	if err := utils.BindEnvToFlags(cmd); err != nil {
		return err
	}

	return nil
}

func runMigrateIamAcls(cmd *cobra.Command, args []string) error {
	opts, err := parseMigrateIamAclsOpts()
	if err != nil {
		return fmt.Errorf("failed to parse migrate IAM ACLs opts: %v", err)
	}

	iamAclsMigrator := NewIamAclsMigrator(*opts)
	if err := iamAclsMigrator.Run(); err != nil {
		return fmt.Errorf("failed to migrate IAM ACLs: %v", err)
	}

	return nil
}

func parseMigrateIamAclsOpts() (*MigrateIamAclsOpts, error) {
	var principalArns []string

	switch {
	case roleArn != "":
		principalArns = []string{roleArn}
	case userArn != "":
		principalArns = []string{userArn}
	case clientDiscovFile != "":
		principals, err := parseClientDiscoveryFile(clientDiscovFile)
		if err != nil {
			return nil, fmt.Errorf("failed to parse client discovery file: %v", err)
		}

		if outputDir == "" {
			outputDir = "client-discovery-acls"
		}

		principalArns = principals
	}

	opts := MigrateIamAclsOpts{
		PrincipalArns:   principalArns,
		OutputDir:       outputDir,
		SkipAuditReport: skipAuditReport,
	}

	return &opts, nil
}

// Client ID,Role,Topic,Auth,Principal,Timestamp
func parseClientDiscoveryFile(clientDiscovFile string) ([]string, error) {
	file, err := os.Open(clientDiscovFile)
	if err != nil {
		return nil, fmt.Errorf("failed to read client discovery file: %v", err)
	}
	defer file.Close()

	reader := csv.NewReader(file)
	records, err := reader.ReadAll()
	if err != nil {
		return nil, fmt.Errorf("failed to read all records from client discovery file: %v", err)
	}

	var principals []string
	for _, record := range records[1:] {
		authType := record[3]

		if authType == "IAM" {
			principals = append(principals, record[4])
		}
	}

	principalArns, err := evaluatePrincipal(principals)
	if err != nil {
		return nil, fmt.Errorf("failed to evaluate principal: %v", err)
	}

	return principalArns, nil
}

// arn:aws:sts::000123456789:assumed-role/kcp-iam-role/i-0ab123456cdef7890
// arn:aws:iam::000123456789:role/kcp-iam-role
func evaluatePrincipal(discoveredPrincipals []string) ([]string, error) {
	var principalArns []string

	for _, principal := range discoveredPrincipals {
		arn := strings.Replace(principal, "arn:aws:sts::", "arn:aws:iam::", 1)
		arn = strings.Replace(arn, ":assumed-role/", ":role/", 1)

		parts := strings.Split(arn, "/")
		if len(parts) > 2 {
			arn = strings.Join(parts[:2], "/")
		}

		if slices.Contains(principalArns, arn) {
			continue
		}

		principalArns = append(principalArns, arn)
	}

	return principalArns, nil
}
